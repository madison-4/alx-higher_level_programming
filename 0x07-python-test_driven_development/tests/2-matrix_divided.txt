===========================
	Testing The function and arguments sent to it

***************************

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided()
Traceback (most recent call Last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

::

>>> matrix_divided(9)
Traceback (most recent call last):
...
TypeError: add() missing 1 required positional argument: 'div'

::

=========================================================

	Wrong arguments test

********************************

>>> matrix_divided({789, 678}, 8)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[4, 5], [5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero
>>> matrix_divided([[4,5],[5,6]], NaN)
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5], [5,6]], nan)
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5], [5, 6]], string)
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5],[5,6]], [4, 5])
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5],[5,6]],[4])
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5],[5,6]], (0))
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided([[4,5],[5,6]], {'strew': 7})
Traceback (most recent call last):
...
TypeError: div must be a number

****************************************

Test the first argument

********************************************************

>>> matrix_divided({'tree': 78}, 89)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided((45, 78), 89)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(['tree', 'top', 78], 78)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([67, 89, 89], 78)
Traceback (most recent call last):
...
TypeError: matrix must be a matric (list of lists) of integers/floats
>>> matrix_divided([[67, 87, 98], [67, 87, 'tree']], 87)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[67, 89, 98], [89, 87]], 76)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided ([[60, 60], [78, 98, 98]], 8)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>>  matrix_divided([[60, NaN, 78], [78, 98, 98]], 8)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> ([[60, NaN, 78], [78, 98, inf]], 8)
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

===========================================
correct case

****************************************************

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
